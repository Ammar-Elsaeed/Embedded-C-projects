
task-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000060c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007a0  080007a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007a0  080007a0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080007a0  080007a0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a0  080007a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a0  080007a0  000107a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007a4  080007a4  000107a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080007a8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080007ac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080007ac  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000185f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000066c  00000000  00000000  00021893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00021f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  000220f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e416  00000000  00000000  00022288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024fd  00000000  00000000  0003069e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e0d8  00000000  00000000  00032b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b0c73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b4  00000000  00000000  000b0cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000788 	.word	0x08000788

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000788 	.word	0x08000788

080001d4 <main>:
#include "GPIO.h"
#include "stm32f401xc.h"
#define button_state (GPIO_ReadPin('B',3))


int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
//  GPIOB_OTYPER &= ~(0x07<<5); // clear 5,6,7 so the output type is push-pull

//  //set bin 3 to pull up
//  GPIOB_PUPDR  &= ~(0x03<<2*3);
//  GPIOB_PUPDR |= (1<<2*3);
	GPIO_Init('B', 5 , OUTPUT, PUSH_PULL);
 80001da:	2300      	movs	r3, #0
 80001dc:	2201      	movs	r2, #1
 80001de:	2105      	movs	r1, #5
 80001e0:	2042      	movs	r0, #66	; 0x42
 80001e2:	f000 f903 	bl	80003ec <GPIO_Init>
	GPIO_Init('B', 6 , OUTPUT, PUSH_PULL);
 80001e6:	2300      	movs	r3, #0
 80001e8:	2201      	movs	r2, #1
 80001ea:	2106      	movs	r1, #6
 80001ec:	2042      	movs	r0, #66	; 0x42
 80001ee:	f000 f8fd 	bl	80003ec <GPIO_Init>
	GPIO_Init('B', 7 , OUTPUT, PUSH_PULL);
 80001f2:	2300      	movs	r3, #0
 80001f4:	2201      	movs	r2, #1
 80001f6:	2107      	movs	r1, #7
 80001f8:	2042      	movs	r0, #66	; 0x42
 80001fa:	f000 f8f7 	bl	80003ec <GPIO_Init>
    GPIO_Init('B', 3 , INPUT, PULLUP);
 80001fe:	2301      	movs	r3, #1
 8000200:	2200      	movs	r2, #0
 8000202:	2103      	movs	r1, #3
 8000204:	2042      	movs	r0, #66	; 0x42
 8000206:	f000 f8f1 	bl	80003ec <GPIO_Init>
//    GPIOB_PUPDR  &= ~(0x03<<2*3);
//    GPIOB_PUPDR |= (1<<2*3);
  short int checkbit3=button_state;
 800020a:	2103      	movs	r1, #3
 800020c:	2042      	movs	r0, #66	; 0x42
 800020e:	f000 fa43 	bl	8000698 <GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	81fb      	strh	r3, [r7, #14]
  unsigned char color =0;
 8000216:	2300      	movs	r3, #0
 8000218:	737b      	strb	r3, [r7, #13]
  unsigned char colorbit0=0;
 800021a:	2300      	movs	r3, #0
 800021c:	71fb      	strb	r3, [r7, #7]
  unsigned char colorbit1=0;
 800021e:	2300      	movs	r3, #0
 8000220:	71bb      	strb	r3, [r7, #6]
  unsigned char colorbit2=0;
 8000222:	2300      	movs	r3, #0
 8000224:	717b      	strb	r3, [r7, #5]

//  GPIOB_ODR = 1<<5;

  while(1){

	for(int i=0; i<500000;i++){
 8000226:	2300      	movs	r3, #0
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	e00c      	b.n	8000246 <main+0x72>
		checkbit3 = button_state;
 800022c:	2103      	movs	r1, #3
 800022e:	2042      	movs	r0, #66	; 0x42
 8000230:	f000 fa32 	bl	8000698 <GPIO_ReadPin>
 8000234:	4603      	mov	r3, r0
 8000236:	81fb      	strh	r3, [r7, #14]
		if (checkbit3==1){break;}
 8000238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d007      	beq.n	8000250 <main+0x7c>
	for(int i=0; i<500000;i++){
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	3301      	adds	r3, #1
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	4a29      	ldr	r2, [pc, #164]	; (80002f0 <main+0x11c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	ddee      	ble.n	800022c <main+0x58>
 800024e:	e000      	b.n	8000252 <main+0x7e>
		if (checkbit3==1){break;}
 8000250:	bf00      	nop
	} //delay, the button must be pressed for at least the same period as this delay so it counts as a press.

	if (checkbit3 == 0x00){
 8000252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d102      	bne.n	8000260 <main+0x8c>
	color = color+1;}
 800025a:	7b7b      	ldrb	r3, [r7, #13]
 800025c:	3301      	adds	r3, #1
 800025e:	737b      	strb	r3, [r7, #13]

	colorbit0 = (color & 0x01);
 8000260:	7b7b      	ldrb	r3, [r7, #13]
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	71fb      	strb	r3, [r7, #7]
	if (colorbit0 ==0){
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d106      	bne.n	800027c <main+0xa8>
		GPIOB_ODR &= ~(1<<5);}
 800026e:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <main+0x120>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a20      	ldr	r2, [pc, #128]	; (80002f4 <main+0x120>)
 8000274:	f023 0320 	bic.w	r3, r3, #32
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	e005      	b.n	8000288 <main+0xb4>
	else{
		GPIOB_ODR |=(1<<5);}
 800027c:	4b1d      	ldr	r3, [pc, #116]	; (80002f4 <main+0x120>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a1c      	ldr	r2, [pc, #112]	; (80002f4 <main+0x120>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6153      	str	r3, [r2, #20]

	colorbit1 = (color & 0x02);
 8000288:	7b7b      	ldrb	r3, [r7, #13]
 800028a:	f003 0302 	and.w	r3, r3, #2
 800028e:	71bb      	strb	r3, [r7, #6]
	if (colorbit1 ==0){
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d106      	bne.n	80002a4 <main+0xd0>
		GPIOB_ODR &= ~(1<<6);}
 8000296:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <main+0x120>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a16      	ldr	r2, [pc, #88]	; (80002f4 <main+0x120>)
 800029c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	e005      	b.n	80002b0 <main+0xdc>
	else{
		GPIOB_ODR |=(1<<6);}
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <main+0x120>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <main+0x120>)
 80002aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ae:	6153      	str	r3, [r2, #20]

	colorbit2 = (color & 0x04);
 80002b0:	7b7b      	ldrb	r3, [r7, #13]
 80002b2:	f003 0304 	and.w	r3, r3, #4
 80002b6:	717b      	strb	r3, [r7, #5]
	if (colorbit2 ==0){
 80002b8:	797b      	ldrb	r3, [r7, #5]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d106      	bne.n	80002cc <main+0xf8>
		GPIOB_ODR &= ~(1<<7);}
 80002be:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <main+0x120>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a0c      	ldr	r2, [pc, #48]	; (80002f4 <main+0x120>)
 80002c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002c8:	6153      	str	r3, [r2, #20]
 80002ca:	e00c      	b.n	80002e6 <main+0x112>
	else{
		GPIOB_ODR |=(1<<7);}
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <main+0x120>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <main+0x120>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6153      	str	r3, [r2, #20]

	while(checkbit3==0){//rising edge detection, this won't exit until we unpress the button. which brings logic level to 1.
 80002d8:	e005      	b.n	80002e6 <main+0x112>
		checkbit3 = button_state;
 80002da:	2103      	movs	r1, #3
 80002dc:	2042      	movs	r0, #66	; 0x42
 80002de:	f000 f9db 	bl	8000698 <GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	81fb      	strh	r3, [r7, #14]
	while(checkbit3==0){//rising edge detection, this won't exit until we unpress the button. which brings logic level to 1.
 80002e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f5      	beq.n	80002da <main+0x106>
	for(int i=0; i<500000;i++){
 80002ee:	e79a      	b.n	8000226 <main+0x52>
 80002f0:	0007a11f 	.word	0x0007a11f
 80002f4:	40020400 	.word	0x40020400

080002f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <NMI_Handler+0x4>

080002fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000302:	e7fe      	b.n	8000302 <HardFault_Handler+0x4>

08000304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <MemManage_Handler+0x4>

0800030a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800030e:	e7fe      	b.n	800030e <BusFault_Handler+0x4>

08000310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000314:	e7fe      	b.n	8000314 <UsageFault_Handler+0x4>

08000316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr

08000324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr

08000340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000344:	f000 f83e 	bl	80003c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <SystemInit+0x20>)
 8000352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000356:	4a05      	ldr	r2, [pc, #20]	; (800036c <SystemInit+0x20>)
 8000358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800035c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000376:	490e      	ldr	r1, [pc, #56]	; (80003b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800038c:	4c0b      	ldr	r4, [pc, #44]	; (80003bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800039a:	f7ff ffd7 	bl	800034c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800039e:	f000 f9cf 	bl	8000740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003a2:	f7ff ff17 	bl	80001d4 <main>
  bx  lr    
 80003a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003b4:	080007a8 	.word	0x080007a8
  ldr r2, =_sbss
 80003b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003bc:	20000024 	.word	0x20000024

080003c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC_IRQHandler>
	...

080003c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <HAL_IncTick+0x20>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	461a      	mov	r2, r3
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HAL_IncTick+0x24>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4413      	add	r3, r2
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <HAL_IncTick+0x24>)
 80003d6:	6013      	str	r3, [r2, #0]
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	20000000 	.word	0x20000000
 80003e8:	20000020 	.word	0x20000020

080003ec <GPIO_Init>:
 */
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"
void GPIO_Init( char Port, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60b9      	str	r1, [r7, #8]
 80003f4:	607a      	str	r2, [r7, #4]
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	4603      	mov	r3, r0
 80003fa:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	switch (Port)
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	2b41      	cmp	r3, #65	; 0x41
 8000400:	d003      	beq.n	800040a <GPIO_Init+0x1e>
 8000402:	2b42      	cmp	r3, #66	; 0x42
 8000404:	f000 809d 	beq.w	8000542 <GPIO_Init+0x156>
				}// end switch
				//end switch
		break;
	}

}
 8000408:	e13a      	b.n	8000680 <GPIO_Init+0x294>
				RCC_AHB1ENR |= (0x01 <<0);
 800040a:	4ba0      	ldr	r3, [pc, #640]	; (800068c <GPIO_Init+0x2a0>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a9f      	ldr	r2, [pc, #636]	; (800068c <GPIO_Init+0x2a0>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b03      	cmp	r3, #3
 800041a:	f200 812e 	bhi.w	800067a <GPIO_Init+0x28e>
 800041e:	a201      	add	r2, pc, #4	; (adr r2, 8000424 <GPIO_Init+0x38>)
 8000420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000424:	08000435 	.word	0x08000435
 8000428:	080004bd 	.word	0x080004bd
 800042c:	08000511 	.word	0x08000511
 8000430:	08000529 	.word	0x08000529
							GPIOA_MODER &= ~(0x03 << 2*PIN_NO);
 8000434:	4b96      	ldr	r3, [pc, #600]	; (8000690 <GPIO_Init+0x2a4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	0052      	lsls	r2, r2, #1
 800043c:	2103      	movs	r1, #3
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	43d2      	mvns	r2, r2
 8000444:	4611      	mov	r1, r2
 8000446:	4a92      	ldr	r2, [pc, #584]	; (8000690 <GPIO_Init+0x2a4>)
 8000448:	400b      	ands	r3, r1
 800044a:	6013      	str	r3, [r2, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d003      	beq.n	800045a <GPIO_Init+0x6e>
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d018      	beq.n	800048a <GPIO_Init+0x9e>
					break;
 8000458:	e072      	b.n	8000540 <GPIO_Init+0x154>
						GPIOA_PUPDR &= ~(0x03<<2*PIN_NO);
 800045a:	4b8d      	ldr	r3, [pc, #564]	; (8000690 <GPIO_Init+0x2a4>)
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	0052      	lsls	r2, r2, #1
 8000462:	2103      	movs	r1, #3
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	43d2      	mvns	r2, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4a88      	ldr	r2, [pc, #544]	; (8000690 <GPIO_Init+0x2a4>)
 800046e:	400b      	ands	r3, r1
 8000470:	60d3      	str	r3, [r2, #12]
						GPIOA_PUPDR |= (1<<2*PIN_NO);
 8000472:	4b87      	ldr	r3, [pc, #540]	; (8000690 <GPIO_Init+0x2a4>)
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	0052      	lsls	r2, r2, #1
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a83      	ldr	r2, [pc, #524]	; (8000690 <GPIO_Init+0x2a4>)
 8000484:	430b      	orrs	r3, r1
 8000486:	60d3      	str	r3, [r2, #12]
					break;
 8000488:	e017      	b.n	80004ba <GPIO_Init+0xce>
						GPIOA_PUPDR &= ~(0x03<<2*PIN_NO);
 800048a:	4b81      	ldr	r3, [pc, #516]	; (8000690 <GPIO_Init+0x2a4>)
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	0052      	lsls	r2, r2, #1
 8000492:	2103      	movs	r1, #3
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	43d2      	mvns	r2, r2
 800049a:	4611      	mov	r1, r2
 800049c:	4a7c      	ldr	r2, [pc, #496]	; (8000690 <GPIO_Init+0x2a4>)
 800049e:	400b      	ands	r3, r1
 80004a0:	60d3      	str	r3, [r2, #12]
						GPIOA_PUPDR |= (0x02<<2*PIN_NO);
 80004a2:	4b7b      	ldr	r3, [pc, #492]	; (8000690 <GPIO_Init+0x2a4>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	2102      	movs	r1, #2
 80004ac:	fa01 f202 	lsl.w	r2, r1, r2
 80004b0:	4611      	mov	r1, r2
 80004b2:	4a77      	ldr	r2, [pc, #476]	; (8000690 <GPIO_Init+0x2a4>)
 80004b4:	430b      	orrs	r3, r1
 80004b6:	60d3      	str	r3, [r2, #12]
						break;
 80004b8:	bf00      	nop
					break;
 80004ba:	e041      	b.n	8000540 <GPIO_Init+0x154>
							GPIOA_MODER |= (0x01 << 2*PIN_NO);
 80004bc:	4b74      	ldr	r3, [pc, #464]	; (8000690 <GPIO_Init+0x2a4>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	68ba      	ldr	r2, [r7, #8]
 80004c2:	0052      	lsls	r2, r2, #1
 80004c4:	2101      	movs	r1, #1
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a70      	ldr	r2, [pc, #448]	; (8000690 <GPIO_Init+0x2a4>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6013      	str	r3, [r2, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d003      	beq.n	80004e0 <GPIO_Init+0xf4>
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d00c      	beq.n	80004f8 <GPIO_Init+0x10c>
					break;
 80004de:	e02f      	b.n	8000540 <GPIO_Init+0x154>
												GPIOA_OTYPER &= ~(0x01<<PIN_NO);
 80004e0:	4b6b      	ldr	r3, [pc, #428]	; (8000690 <GPIO_Init+0x2a4>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2101      	movs	r1, #1
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a67      	ldr	r2, [pc, #412]	; (8000690 <GPIO_Init+0x2a4>)
 80004f2:	400b      	ands	r3, r1
 80004f4:	6053      	str	r3, [r2, #4]
										break;
 80004f6:	e00a      	b.n	800050e <GPIO_Init+0x122>
												GPIOA_OTYPER |= (0x01<<PIN_NO);
 80004f8:	4b65      	ldr	r3, [pc, #404]	; (8000690 <GPIO_Init+0x2a4>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	2101      	movs	r1, #1
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	fa01 f202 	lsl.w	r2, r1, r2
 8000504:	4611      	mov	r1, r2
 8000506:	4a62      	ldr	r2, [pc, #392]	; (8000690 <GPIO_Init+0x2a4>)
 8000508:	430b      	orrs	r3, r1
 800050a:	6053      	str	r3, [r2, #4]
										break;
 800050c:	bf00      	nop
					break;
 800050e:	e017      	b.n	8000540 <GPIO_Init+0x154>
							GPIOA_MODER |= (0x02 << 2*PIN_NO);
 8000510:	4b5f      	ldr	r3, [pc, #380]	; (8000690 <GPIO_Init+0x2a4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	68ba      	ldr	r2, [r7, #8]
 8000516:	0052      	lsls	r2, r2, #1
 8000518:	2102      	movs	r1, #2
 800051a:	fa01 f202 	lsl.w	r2, r1, r2
 800051e:	4611      	mov	r1, r2
 8000520:	4a5b      	ldr	r2, [pc, #364]	; (8000690 <GPIO_Init+0x2a4>)
 8000522:	430b      	orrs	r3, r1
 8000524:	6013      	str	r3, [r2, #0]
					break;
 8000526:	e00b      	b.n	8000540 <GPIO_Init+0x154>
							GPIOA_MODER |= (0x03 << 2*PIN_NO);
 8000528:	4b59      	ldr	r3, [pc, #356]	; (8000690 <GPIO_Init+0x2a4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	68ba      	ldr	r2, [r7, #8]
 800052e:	0052      	lsls	r2, r2, #1
 8000530:	2103      	movs	r1, #3
 8000532:	fa01 f202 	lsl.w	r2, r1, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a55      	ldr	r2, [pc, #340]	; (8000690 <GPIO_Init+0x2a4>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6013      	str	r3, [r2, #0]
					break;
 800053e:	bf00      	nop
		break;
 8000540:	e09b      	b.n	800067a <GPIO_Init+0x28e>
				RCC_AHB1ENR |= (0x01 <<1);
 8000542:	4b52      	ldr	r3, [pc, #328]	; (800068c <GPIO_Init+0x2a0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a51      	ldr	r2, [pc, #324]	; (800068c <GPIO_Init+0x2a0>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b03      	cmp	r3, #3
 8000552:	f200 8094 	bhi.w	800067e <GPIO_Init+0x292>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <GPIO_Init+0x170>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	0800056d 	.word	0x0800056d
 8000560:	080005f5 	.word	0x080005f5
 8000564:	08000649 	.word	0x08000649
 8000568:	08000661 	.word	0x08000661
							GPIOB_MODER &= ~(0x03 << 2*PIN_NO);
 800056c:	4b49      	ldr	r3, [pc, #292]	; (8000694 <GPIO_Init+0x2a8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	0052      	lsls	r2, r2, #1
 8000574:	2103      	movs	r1, #3
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	43d2      	mvns	r2, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a45      	ldr	r2, [pc, #276]	; (8000694 <GPIO_Init+0x2a8>)
 8000580:	400b      	ands	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d003      	beq.n	8000592 <GPIO_Init+0x1a6>
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d018      	beq.n	80005c2 <GPIO_Init+0x1d6>
					break;
 8000590:	e072      	b.n	8000678 <GPIO_Init+0x28c>
											GPIOB_PUPDR &= ~(0x03<<2*PIN_NO);
 8000592:	4b40      	ldr	r3, [pc, #256]	; (8000694 <GPIO_Init+0x2a8>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	2103      	movs	r1, #3
 800059c:	fa01 f202 	lsl.w	r2, r1, r2
 80005a0:	43d2      	mvns	r2, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a3b      	ldr	r2, [pc, #236]	; (8000694 <GPIO_Init+0x2a8>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	60d3      	str	r3, [r2, #12]
											GPIOB_PUPDR |= (1<<2*PIN_NO);
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <GPIO_Init+0x2a8>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	0052      	lsls	r2, r2, #1
 80005b2:	2101      	movs	r1, #1
 80005b4:	fa01 f202 	lsl.w	r2, r1, r2
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a36      	ldr	r2, [pc, #216]	; (8000694 <GPIO_Init+0x2a8>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
										break;
 80005c0:	e017      	b.n	80005f2 <GPIO_Init+0x206>
											GPIOB_PUPDR &= ~(0x03<<2*PIN_NO);
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <GPIO_Init+0x2a8>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	0052      	lsls	r2, r2, #1
 80005ca:	2103      	movs	r1, #3
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	43d2      	mvns	r2, r2
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a2f      	ldr	r2, [pc, #188]	; (8000694 <GPIO_Init+0x2a8>)
 80005d6:	400b      	ands	r3, r1
 80005d8:	60d3      	str	r3, [r2, #12]
											GPIOB_PUPDR |= (0x02<<2*PIN_NO);
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <GPIO_Init+0x2a8>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	0052      	lsls	r2, r2, #1
 80005e2:	2102      	movs	r1, #2
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <GPIO_Init+0x2a8>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	60d3      	str	r3, [r2, #12]
											break;
 80005f0:	bf00      	nop
					break;
 80005f2:	e041      	b.n	8000678 <GPIO_Init+0x28c>
							GPIOB_MODER |= (0x01 << 2*PIN_NO);
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <GPIO_Init+0x2a8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	68ba      	ldr	r2, [r7, #8]
 80005fa:	0052      	lsls	r2, r2, #1
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	4611      	mov	r1, r2
 8000604:	4a23      	ldr	r2, [pc, #140]	; (8000694 <GPIO_Init+0x2a8>)
 8000606:	430b      	orrs	r3, r1
 8000608:	6013      	str	r3, [r2, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <GPIO_Init+0x22c>
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00c      	beq.n	8000630 <GPIO_Init+0x244>
					break;
 8000616:	e02f      	b.n	8000678 <GPIO_Init+0x28c>
												GPIOB_OTYPER &= ~(0x01<<PIN_NO);
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <GPIO_Init+0x2a8>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2101      	movs	r1, #1
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	43d2      	mvns	r2, r2
 8000626:	4611      	mov	r1, r2
 8000628:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <GPIO_Init+0x2a8>)
 800062a:	400b      	ands	r3, r1
 800062c:	6053      	str	r3, [r2, #4]
										break;
 800062e:	e00a      	b.n	8000646 <GPIO_Init+0x25a>
												GPIOB_OTYPER |= (0x01<<PIN_NO);
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <GPIO_Init+0x2a8>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2101      	movs	r1, #1
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <GPIO_Init+0x2a8>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6053      	str	r3, [r2, #4]
										break;
 8000644:	bf00      	nop
					break;
 8000646:	e017      	b.n	8000678 <GPIO_Init+0x28c>
							GPIOB_MODER |= (0x02 << 2*PIN_NO);
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <GPIO_Init+0x2a8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	2102      	movs	r1, #2
 8000652:	fa01 f202 	lsl.w	r2, r1, r2
 8000656:	4611      	mov	r1, r2
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <GPIO_Init+0x2a8>)
 800065a:	430b      	orrs	r3, r1
 800065c:	6013      	str	r3, [r2, #0]
					break;
 800065e:	e00b      	b.n	8000678 <GPIO_Init+0x28c>
							GPIOB_MODER |= (0x03 << 2*PIN_NO);
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <GPIO_Init+0x2a8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	2103      	movs	r1, #3
 800066a:	fa01 f202 	lsl.w	r2, r1, r2
 800066e:	4611      	mov	r1, r2
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <GPIO_Init+0x2a8>)
 8000672:	430b      	orrs	r3, r1
 8000674:	6013      	str	r3, [r2, #0]
					break;
 8000676:	bf00      	nop
		break;
 8000678:	e001      	b.n	800067e <GPIO_Init+0x292>
		break;
 800067a:	bf00      	nop
 800067c:	e000      	b.n	8000680 <GPIO_Init+0x294>
		break;
 800067e:	bf00      	nop
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40023800 	.word	0x40023800
 8000690:	40020000 	.word	0x40020000
 8000694:	40020400 	.word	0x40020400

08000698 <GPIO_ReadPin>:

	}// end switch

	return result;
}
unsigned char GPIO_ReadPin(char Port, unsigned int PIN_NO){
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
	unsigned char result;
	unsigned char read_data;
	switch(Port)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b41      	cmp	r3, #65	; 0x41
 80006a8:	d002      	beq.n	80006b0 <GPIO_ReadPin+0x18>
 80006aa:	2b42      	cmp	r3, #66	; 0x42
 80006ac:	d01e      	beq.n	80006ec <GPIO_ReadPin+0x54>
 80006ae:	e03b      	b.n	8000728 <GPIO_ReadPin+0x90>
		{
	case('A'):
			if((GPIOA_MODER & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 0){
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <GPIO_ReadPin+0xa0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	2103      	movs	r1, #3
 80006ba:	fa01 f202 	lsl.w	r2, r1, r2
 80006be:	401a      	ands	r2, r3
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	fa22 f303 	lsr.w	r3, r2, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10c      	bne.n	80006e6 <GPIO_ReadPin+0x4e>
				result = OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73bb      	strb	r3, [r7, #14]
				read_data = GPIOA_IDR & (0x01<<PIN_NO);
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <GPIO_ReadPin+0xa0>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	2101      	movs	r1, #1
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4013      	ands	r3, r2
 80006e2:	73fb      	strb	r3, [r7, #15]
			}
			else{
				result = NOK;
			}
	break;
 80006e4:	e020      	b.n	8000728 <GPIO_ReadPin+0x90>
				result = NOK;
 80006e6:	2301      	movs	r3, #1
 80006e8:	73bb      	strb	r3, [r7, #14]
	break;
 80006ea:	e01d      	b.n	8000728 <GPIO_ReadPin+0x90>
	case('B'):
		if((GPIOB_MODER & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 0){
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <GPIO_ReadPin+0xa4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	0052      	lsls	r2, r2, #1
 80006f4:	2103      	movs	r1, #3
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	401a      	ands	r2, r3
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	fa22 f303 	lsr.w	r3, r2, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d10c      	bne.n	8000722 <GPIO_ReadPin+0x8a>
						result = OK;
 8000708:	2300      	movs	r3, #0
 800070a:	73bb      	strb	r3, [r7, #14]
						read_data = GPIOB_IDR & (0x01<<PIN_NO);
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <GPIO_ReadPin+0xa4>)
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	2101      	movs	r1, #1
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	fa01 f303 	lsl.w	r3, r1, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4013      	ands	r3, r2
 800071e:	73fb      	strb	r3, [r7, #15]
					}
					else{
						result = NOK;
					}
	break;
 8000720:	e001      	b.n	8000726 <GPIO_ReadPin+0x8e>
						result = NOK;
 8000722:	2301      	movs	r3, #1
 8000724:	73bb      	strb	r3, [r7, #14]
	break;
 8000726:	bf00      	nop

		}
	return read_data;
 8000728:	7bfb      	ldrb	r3, [r7, #15]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400

08000740 <__libc_init_array>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	4d0d      	ldr	r5, [pc, #52]	; (8000778 <__libc_init_array+0x38>)
 8000744:	4c0d      	ldr	r4, [pc, #52]	; (800077c <__libc_init_array+0x3c>)
 8000746:	1b64      	subs	r4, r4, r5
 8000748:	10a4      	asrs	r4, r4, #2
 800074a:	2600      	movs	r6, #0
 800074c:	42a6      	cmp	r6, r4
 800074e:	d109      	bne.n	8000764 <__libc_init_array+0x24>
 8000750:	4d0b      	ldr	r5, [pc, #44]	; (8000780 <__libc_init_array+0x40>)
 8000752:	4c0c      	ldr	r4, [pc, #48]	; (8000784 <__libc_init_array+0x44>)
 8000754:	f000 f818 	bl	8000788 <_init>
 8000758:	1b64      	subs	r4, r4, r5
 800075a:	10a4      	asrs	r4, r4, #2
 800075c:	2600      	movs	r6, #0
 800075e:	42a6      	cmp	r6, r4
 8000760:	d105      	bne.n	800076e <__libc_init_array+0x2e>
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f855 3b04 	ldr.w	r3, [r5], #4
 8000768:	4798      	blx	r3
 800076a:	3601      	adds	r6, #1
 800076c:	e7ee      	b.n	800074c <__libc_init_array+0xc>
 800076e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000772:	4798      	blx	r3
 8000774:	3601      	adds	r6, #1
 8000776:	e7f2      	b.n	800075e <__libc_init_array+0x1e>
 8000778:	080007a0 	.word	0x080007a0
 800077c:	080007a0 	.word	0x080007a0
 8000780:	080007a0 	.word	0x080007a0
 8000784:	080007a4 	.word	0x080007a4

08000788 <_init>:
 8000788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078a:	bf00      	nop
 800078c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078e:	bc08      	pop	{r3}
 8000790:	469e      	mov	lr, r3
 8000792:	4770      	bx	lr

08000794 <_fini>:
 8000794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000796:	bf00      	nop
 8000798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800079a:	bc08      	pop	{r3}
 800079c:	469e      	mov	lr, r3
 800079e:	4770      	bx	lr
