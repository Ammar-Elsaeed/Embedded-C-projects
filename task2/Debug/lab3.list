
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  4 .ARM          00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800043c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800043c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009e0  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000244  00000000  00000000  00010e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00011090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00011100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd65  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a55  00000000  00000000  0001eead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fbaf  00000000  00000000  0001f902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006f4b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  0006f504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800041c 	.word	0x0800041c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800041c 	.word	0x0800041c

080001d4 <main>:
#include "stm32f401cc_interface.h"
#define button_state ((GPIOB_IDR & (1<<3)) >>3)

int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0

  RCC_AHB1ENR |= (1<<1);//supply clock to port B (enable)
 80001da:	4b5d      	ldr	r3, [pc, #372]	; (8000350 <main+0x17c>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a5c      	ldr	r2, [pc, #368]	; (8000350 <main+0x17c>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOB_MODER &= ~(0x03<<2*3); //set bin 3 as input
 80001e6:	4b5b      	ldr	r3, [pc, #364]	; (8000354 <main+0x180>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a5a      	ldr	r2, [pc, #360]	; (8000354 <main+0x180>)
 80001ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001f0:	6013      	str	r3, [r2, #0]
  //reset bins 5,6,7 . then set them to output
  GPIOB_MODER &= ~(0x03<<2*5);
 80001f2:	4b58      	ldr	r3, [pc, #352]	; (8000354 <main+0x180>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a57      	ldr	r2, [pc, #348]	; (8000354 <main+0x180>)
 80001f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001fc:	6013      	str	r3, [r2, #0]
  GPIOB_MODER &= ~(0x03<<2*6);
 80001fe:	4b55      	ldr	r3, [pc, #340]	; (8000354 <main+0x180>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a54      	ldr	r2, [pc, #336]	; (8000354 <main+0x180>)
 8000204:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000208:	6013      	str	r3, [r2, #0]
  GPIOB_MODER &= ~(0x03<<2*7);
 800020a:	4b52      	ldr	r3, [pc, #328]	; (8000354 <main+0x180>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a51      	ldr	r2, [pc, #324]	; (8000354 <main+0x180>)
 8000210:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000214:	6013      	str	r3, [r2, #0]

  GPIOB_MODER |= (1<<2*5);
 8000216:	4b4f      	ldr	r3, [pc, #316]	; (8000354 <main+0x180>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a4e      	ldr	r2, [pc, #312]	; (8000354 <main+0x180>)
 800021c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000220:	6013      	str	r3, [r2, #0]
  GPIOB_MODER |= (1<<2*6);
 8000222:	4b4c      	ldr	r3, [pc, #304]	; (8000354 <main+0x180>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a4b      	ldr	r2, [pc, #300]	; (8000354 <main+0x180>)
 8000228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800022c:	6013      	str	r3, [r2, #0]
  GPIOB_MODER |= (1<<2*7);
 800022e:	4b49      	ldr	r3, [pc, #292]	; (8000354 <main+0x180>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a48      	ldr	r2, [pc, #288]	; (8000354 <main+0x180>)
 8000234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000238:	6013      	str	r3, [r2, #0]
  //set the output type to push pull
  GPIOB_OTYPER &= ~(0x07<<5); // clear 5,6,7 so the output type is push-pull
 800023a:	4b46      	ldr	r3, [pc, #280]	; (8000354 <main+0x180>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a45      	ldr	r2, [pc, #276]	; (8000354 <main+0x180>)
 8000240:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000244:	6053      	str	r3, [r2, #4]

  //set bin 3 to pull up
  GPIOB_PUPDR  &= ~(0x03<<2*3);
 8000246:	4b43      	ldr	r3, [pc, #268]	; (8000354 <main+0x180>)
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	4a42      	ldr	r2, [pc, #264]	; (8000354 <main+0x180>)
 800024c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000250:	60d3      	str	r3, [r2, #12]
  GPIOB_PUPDR |= (1<<2*3);
 8000252:	4b40      	ldr	r3, [pc, #256]	; (8000354 <main+0x180>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	4a3f      	ldr	r2, [pc, #252]	; (8000354 <main+0x180>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	60d3      	str	r3, [r2, #12]
  short int checkbit3=button_state;
 800025e:	4b3d      	ldr	r3, [pc, #244]	; (8000354 <main+0x180>)
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	08db      	lsrs	r3, r3, #3
 8000264:	b21b      	sxth	r3, r3
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	81fb      	strh	r3, [r7, #14]
  unsigned char color =0;
 800026c:	2300      	movs	r3, #0
 800026e:	737b      	strb	r3, [r7, #13]
  unsigned char colorbit0=0;
 8000270:	2300      	movs	r3, #0
 8000272:	71fb      	strb	r3, [r7, #7]
  unsigned char colorbit1=0;
 8000274:	2300      	movs	r3, #0
 8000276:	71bb      	strb	r3, [r7, #6]
  unsigned char colorbit2=0;
 8000278:	2300      	movs	r3, #0
 800027a:	717b      	strb	r3, [r7, #5]
  unsigned char stillpressed=0;
 800027c:	2300      	movs	r3, #0
 800027e:	713b      	strb	r3, [r7, #4]
//  GPIOB_ODR = 1<<5;

  while(1){

	for(int i=0; i<500000;i++){
 8000280:	2300      	movs	r3, #0
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	e00d      	b.n	80002a2 <main+0xce>
		checkbit3 = button_state;
 8000286:	4b33      	ldr	r3, [pc, #204]	; (8000354 <main+0x180>)
 8000288:	691b      	ldr	r3, [r3, #16]
 800028a:	08db      	lsrs	r3, r3, #3
 800028c:	b21b      	sxth	r3, r3
 800028e:	f003 0301 	and.w	r3, r3, #1
 8000292:	81fb      	strh	r3, [r7, #14]
		if (checkbit3==1){break;}
 8000294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d007      	beq.n	80002ac <main+0xd8>
	for(int i=0; i<500000;i++){
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	3301      	adds	r3, #1
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	4a2c      	ldr	r2, [pc, #176]	; (8000358 <main+0x184>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	dded      	ble.n	8000286 <main+0xb2>
 80002aa:	e000      	b.n	80002ae <main+0xda>
		if (checkbit3==1){break;}
 80002ac:	bf00      	nop
	} //delay, the button must be pressed for at least the same period as this delay so it counts as a press.

	if (checkbit3 == 0x00){
 80002ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d102      	bne.n	80002bc <main+0xe8>
	color = color+1;}
 80002b6:	7b7b      	ldrb	r3, [r7, #13]
 80002b8:	3301      	adds	r3, #1
 80002ba:	737b      	strb	r3, [r7, #13]

	colorbit0 = (color & 0x01);
 80002bc:	7b7b      	ldrb	r3, [r7, #13]
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	71fb      	strb	r3, [r7, #7]
	if (colorbit0 ==0){
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d106      	bne.n	80002d8 <main+0x104>
		GPIOB_ODR &= ~(1<<5);}
 80002ca:	4b22      	ldr	r3, [pc, #136]	; (8000354 <main+0x180>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a21      	ldr	r2, [pc, #132]	; (8000354 <main+0x180>)
 80002d0:	f023 0320 	bic.w	r3, r3, #32
 80002d4:	6153      	str	r3, [r2, #20]
 80002d6:	e005      	b.n	80002e4 <main+0x110>
	else{
		GPIOB_ODR |=(1<<5);}
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <main+0x180>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <main+0x180>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6153      	str	r3, [r2, #20]

	colorbit1 = (color & 0x02);
 80002e4:	7b7b      	ldrb	r3, [r7, #13]
 80002e6:	f003 0302 	and.w	r3, r3, #2
 80002ea:	71bb      	strb	r3, [r7, #6]
	if (colorbit1 ==0){
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d106      	bne.n	8000300 <main+0x12c>
		GPIOB_ODR &= ~(1<<6);}
 80002f2:	4b18      	ldr	r3, [pc, #96]	; (8000354 <main+0x180>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a17      	ldr	r2, [pc, #92]	; (8000354 <main+0x180>)
 80002f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	e005      	b.n	800030c <main+0x138>
	else{
		GPIOB_ODR |=(1<<6);}
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <main+0x180>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	4a13      	ldr	r2, [pc, #76]	; (8000354 <main+0x180>)
 8000306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800030a:	6153      	str	r3, [r2, #20]

	colorbit2 = (color & 0x04);
 800030c:	7b7b      	ldrb	r3, [r7, #13]
 800030e:	f003 0304 	and.w	r3, r3, #4
 8000312:	717b      	strb	r3, [r7, #5]
	if (colorbit2 ==0){
 8000314:	797b      	ldrb	r3, [r7, #5]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d106      	bne.n	8000328 <main+0x154>
		GPIOB_ODR &= ~(1<<7);}
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <main+0x180>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <main+0x180>)
 8000320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000324:	6153      	str	r3, [r2, #20]
 8000326:	e00d      	b.n	8000344 <main+0x170>
	else{
		GPIOB_ODR |=(1<<7);}
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <main+0x180>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a09      	ldr	r2, [pc, #36]	; (8000354 <main+0x180>)
 800032e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000332:	6153      	str	r3, [r2, #20]

	while(checkbit3==0){//falling edge detection, this won't exit until we unpress the button. which brings logic level to 1.
 8000334:	e006      	b.n	8000344 <main+0x170>
		checkbit3 = button_state;
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <main+0x180>)
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	08db      	lsrs	r3, r3, #3
 800033c:	b21b      	sxth	r3, r3
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	81fb      	strh	r3, [r7, #14]
	while(checkbit3==0){//falling edge detection, this won't exit until we unpress the button. which brings logic level to 1.
 8000344:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f4      	beq.n	8000336 <main+0x162>
	for(int i=0; i<500000;i++){
 800034c:	e798      	b.n	8000280 <main+0xac>
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800
 8000354:	40020400 	.word	0x40020400
 8000358:	0007a11f 	.word	0x0007a11f

0800035c <SystemInit>:
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <SystemInit+0x20>)
 8000362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000366:	4a05      	ldr	r2, [pc, #20]	; (800037c <SystemInit+0x20>)
 8000368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800036c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <Reset_Handler>:
 8000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b8 <LoopFillZerobss+0x12>
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopFillZerobss+0x16>)
 8000386:	490e      	ldr	r1, [pc, #56]	; (80003c0 <LoopFillZerobss+0x1a>)
 8000388:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <LoopFillZerobss+0x1e>)
 800038a:	2300      	movs	r3, #0
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:
 800038e:	58d4      	ldr	r4, [r2, r3]
 8000390:	50c4      	str	r4, [r0, r3]
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:
 8000394:	18c4      	adds	r4, r0, r3
 8000396:	428c      	cmp	r4, r1
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>
 800039a:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <LoopFillZerobss+0x22>)
 800039c:	4c0b      	ldr	r4, [pc, #44]	; (80003cc <LoopFillZerobss+0x26>)
 800039e:	2300      	movs	r3, #0
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:
 80003a2:	6013      	str	r3, [r2, #0]
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:
 80003a6:	42a2      	cmp	r2, r4
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>
 80003aa:	f7ff ffd7 	bl	800035c <SystemInit>
 80003ae:	f000 f811 	bl	80003d4 <__libc_init_array>
 80003b2:	f7ff ff0f 	bl	80001d4 <main>
 80003b6:	4770      	bx	lr
 80003b8:	20010000 	.word	0x20010000
 80003bc:	20000000 	.word	0x20000000
 80003c0:	20000000 	.word	0x20000000
 80003c4:	0800043c 	.word	0x0800043c
 80003c8:	20000000 	.word	0x20000000
 80003cc:	2000001c 	.word	0x2000001c

080003d0 <ADC_IRQHandler>:
 80003d0:	e7fe      	b.n	80003d0 <ADC_IRQHandler>
	...

080003d4 <__libc_init_array>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	4d0d      	ldr	r5, [pc, #52]	; (800040c <__libc_init_array+0x38>)
 80003d8:	4c0d      	ldr	r4, [pc, #52]	; (8000410 <__libc_init_array+0x3c>)
 80003da:	1b64      	subs	r4, r4, r5
 80003dc:	10a4      	asrs	r4, r4, #2
 80003de:	2600      	movs	r6, #0
 80003e0:	42a6      	cmp	r6, r4
 80003e2:	d109      	bne.n	80003f8 <__libc_init_array+0x24>
 80003e4:	4d0b      	ldr	r5, [pc, #44]	; (8000414 <__libc_init_array+0x40>)
 80003e6:	4c0c      	ldr	r4, [pc, #48]	; (8000418 <__libc_init_array+0x44>)
 80003e8:	f000 f818 	bl	800041c <_init>
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	2600      	movs	r6, #0
 80003f2:	42a6      	cmp	r6, r4
 80003f4:	d105      	bne.n	8000402 <__libc_init_array+0x2e>
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fc:	4798      	blx	r3
 80003fe:	3601      	adds	r6, #1
 8000400:	e7ee      	b.n	80003e0 <__libc_init_array+0xc>
 8000402:	f855 3b04 	ldr.w	r3, [r5], #4
 8000406:	4798      	blx	r3
 8000408:	3601      	adds	r6, #1
 800040a:	e7f2      	b.n	80003f2 <__libc_init_array+0x1e>
 800040c:	08000434 	.word	0x08000434
 8000410:	08000434 	.word	0x08000434
 8000414:	08000434 	.word	0x08000434
 8000418:	08000438 	.word	0x08000438

0800041c <_init>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr

08000428 <_fini>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr
