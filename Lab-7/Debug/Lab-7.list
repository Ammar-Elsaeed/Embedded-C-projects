
Lab-7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000678  08000678  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000678  08000678  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000678  08000678  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000678  08000678  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000678  08000678  00010678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800067c  0800067c  0001067c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000680  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000684  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000684  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000180e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000659  00000000  00000000  00021842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00021ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00022098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e2c4  00000000  00000000  00022238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024af  00000000  00000000  000304fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e1d8  00000000  00000000  000329ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b0b83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005d0  00000000  00000000  000b0bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000660 	.word	0x08000660

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000660 	.word	0x08000660

080001d4 <main>:
#include "GPIO.h"
#include "stm32f401cc_interface.h"


int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	GPIO_Init('A',0,INPUT,PULLUP);
 80001d8:	2301      	movs	r3, #1
 80001da:	2200      	movs	r2, #0
 80001dc:	2100      	movs	r1, #0
 80001de:	2041      	movs	r0, #65	; 0x41
 80001e0:	f000 f8c4 	bl	800036c <GPIO_Init>
	GPIO_Init('A',1,OUTPUT,PUSH_PULL);
 80001e4:	2300      	movs	r3, #0
 80001e6:	2201      	movs	r2, #1
 80001e8:	2101      	movs	r1, #1
 80001ea:	2041      	movs	r0, #65	; 0x41
 80001ec:	f000 f8be 	bl	800036c <GPIO_Init>
	// interrupt work flow
	RCC_APB2ENR |= (1<<14);
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <main+0x5c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	; (8000230 <main+0x5c>)
 80001f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001fa:	6013      	str	r3, [r2, #0]
	SYSCFG_EXTICR1 &= (0x00<<4 * 0);
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <main+0x60>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
	EXTI_IMR |= (1<<0);
 8000202:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <main+0x64>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <main+0x64>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6013      	str	r3, [r2, #0]
	EXTI_RTSR &= 0;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <main+0x68>)
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
	EXTI_FTSR |= 1;
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <main+0x6c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a09      	ldr	r2, [pc, #36]	; (8000240 <main+0x6c>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]
	NVIC_ISER|= (1<<6);
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0x70>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a07      	ldr	r2, [pc, #28]	; (8000244 <main+0x70>)
 8000226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800022a:	6013      	str	r3, [r2, #0]
	while (1){}
 800022c:	e7fe      	b.n	800022c <main+0x58>
 800022e:	bf00      	nop
 8000230:	40023844 	.word	0x40023844
 8000234:	40013808 	.word	0x40013808
 8000238:	40013c00 	.word	0x40013c00
 800023c:	40013c08 	.word	0x40013c08
 8000240:	40013c0c 	.word	0x40013c0c
 8000244:	e000e100 	.word	0xe000e100

08000248 <toggle_led>:
  return 0;
}

void toggle_led(){
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0

//	int data = GPIO_ReadPin('A',1);
//	data ^= (0x01<<0);
//	GPIO_WritePin('A',1,data);
	EXTI_PR |= 1;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <toggle_led+0x28>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <toggle_led+0x28>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6013      	str	r3, [r2, #0]
	GPIOA_ODR ^= (1<<1);
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <toggle_led+0x2c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a05      	ldr	r2, [pc, #20]	; (8000274 <toggle_led+0x2c>)
 800025e:	f083 0302 	eor.w	r3, r3, #2
 8000262:	6153      	str	r3, [r2, #20]

}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40013c14 	.word	0x40013c14
 8000274:	40020000 	.word	0x40020000

08000278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800027c:	e7fe      	b.n	800027c <NMI_Handler+0x4>

0800027e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000282:	e7fe      	b.n	8000282 <HardFault_Handler+0x4>

08000284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000288:	e7fe      	b.n	8000288 <MemManage_Handler+0x4>

0800028a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800028e:	e7fe      	b.n	800028e <BusFault_Handler+0x4>

08000290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000294:	e7fe      	b.n	8000294 <UsageFault_Handler+0x4>

08000296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c4:	f000 f83e 	bl	8000344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}

080002cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <SystemInit+0x20>)
 80002d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002d6:	4a05      	ldr	r2, [pc, #20]	; (80002ec <SystemInit+0x20>)
 80002d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000ed00 	.word	0xe000ed00

080002f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000328 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002f6:	490e      	ldr	r1, [pc, #56]	; (8000330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002f8:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800030c:	4c0b      	ldr	r4, [pc, #44]	; (800033c <LoopFillZerobss+0x26>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800031a:	f7ff ffd7 	bl	80002cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800031e:	f000 f97b 	bl	8000618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000322:	f7ff ff57 	bl	80001d4 <main>
  bx  lr    
 8000326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000328:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000334:	08000680 	.word	0x08000680
  ldr r2, =_sbss
 8000338:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800033c:	20000024 	.word	0x20000024

08000340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC_IRQHandler>
	...

08000344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HAL_IncTick+0x20>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_IncTick+0x24>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4413      	add	r3, r2
 8000354:	4a04      	ldr	r2, [pc, #16]	; (8000368 <HAL_IncTick+0x24>)
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000000 	.word	0x20000000
 8000368:	20000020 	.word	0x20000020

0800036c <GPIO_Init>:
 */
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"
void GPIO_Init( char Port, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State)
{
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	60b9      	str	r1, [r7, #8]
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	4603      	mov	r3, r0
 800037a:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	switch (Port)
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	2b41      	cmp	r3, #65	; 0x41
 8000380:	d003      	beq.n	800038a <GPIO_Init+0x1e>
 8000382:	2b42      	cmp	r3, #66	; 0x42
 8000384:	f000 809d 	beq.w	80004c2 <GPIO_Init+0x156>
				}// end switch
				//end switch
		break;
	}

}
 8000388:	e13a      	b.n	8000600 <GPIO_Init+0x294>
				RCC_AHB1ENR |= (0x01 <<0);
 800038a:	4ba0      	ldr	r3, [pc, #640]	; (800060c <GPIO_Init+0x2a0>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a9f      	ldr	r2, [pc, #636]	; (800060c <GPIO_Init+0x2a0>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2b03      	cmp	r3, #3
 800039a:	f200 812e 	bhi.w	80005fa <GPIO_Init+0x28e>
 800039e:	a201      	add	r2, pc, #4	; (adr r2, 80003a4 <GPIO_Init+0x38>)
 80003a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a4:	080003b5 	.word	0x080003b5
 80003a8:	0800043d 	.word	0x0800043d
 80003ac:	08000491 	.word	0x08000491
 80003b0:	080004a9 	.word	0x080004a9
							GPIOA_MODER &= ~(0x03 << 2*PIN_NO);
 80003b4:	4b96      	ldr	r3, [pc, #600]	; (8000610 <GPIO_Init+0x2a4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	68ba      	ldr	r2, [r7, #8]
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	2103      	movs	r1, #3
 80003be:	fa01 f202 	lsl.w	r2, r1, r2
 80003c2:	43d2      	mvns	r2, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a92      	ldr	r2, [pc, #584]	; (8000610 <GPIO_Init+0x2a4>)
 80003c8:	400b      	ands	r3, r1
 80003ca:	6013      	str	r3, [r2, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d003      	beq.n	80003da <GPIO_Init+0x6e>
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d018      	beq.n	800040a <GPIO_Init+0x9e>
					break;
 80003d8:	e072      	b.n	80004c0 <GPIO_Init+0x154>
						GPIOA_PUPDR &= ~(0x03<<2*PIN_NO);
 80003da:	4b8d      	ldr	r3, [pc, #564]	; (8000610 <GPIO_Init+0x2a4>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	0052      	lsls	r2, r2, #1
 80003e2:	2103      	movs	r1, #3
 80003e4:	fa01 f202 	lsl.w	r2, r1, r2
 80003e8:	43d2      	mvns	r2, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a88      	ldr	r2, [pc, #544]	; (8000610 <GPIO_Init+0x2a4>)
 80003ee:	400b      	ands	r3, r1
 80003f0:	60d3      	str	r3, [r2, #12]
						GPIOA_PUPDR |= (1<<2*PIN_NO);
 80003f2:	4b87      	ldr	r3, [pc, #540]	; (8000610 <GPIO_Init+0x2a4>)
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	0052      	lsls	r2, r2, #1
 80003fa:	2101      	movs	r1, #1
 80003fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000400:	4611      	mov	r1, r2
 8000402:	4a83      	ldr	r2, [pc, #524]	; (8000610 <GPIO_Init+0x2a4>)
 8000404:	430b      	orrs	r3, r1
 8000406:	60d3      	str	r3, [r2, #12]
					break;
 8000408:	e017      	b.n	800043a <GPIO_Init+0xce>
						GPIOA_PUPDR &= ~(0x03<<2*PIN_NO);
 800040a:	4b81      	ldr	r3, [pc, #516]	; (8000610 <GPIO_Init+0x2a4>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	0052      	lsls	r2, r2, #1
 8000412:	2103      	movs	r1, #3
 8000414:	fa01 f202 	lsl.w	r2, r1, r2
 8000418:	43d2      	mvns	r2, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a7c      	ldr	r2, [pc, #496]	; (8000610 <GPIO_Init+0x2a4>)
 800041e:	400b      	ands	r3, r1
 8000420:	60d3      	str	r3, [r2, #12]
						GPIOA_PUPDR |= (0x02<<2*PIN_NO);
 8000422:	4b7b      	ldr	r3, [pc, #492]	; (8000610 <GPIO_Init+0x2a4>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	68ba      	ldr	r2, [r7, #8]
 8000428:	0052      	lsls	r2, r2, #1
 800042a:	2102      	movs	r1, #2
 800042c:	fa01 f202 	lsl.w	r2, r1, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a77      	ldr	r2, [pc, #476]	; (8000610 <GPIO_Init+0x2a4>)
 8000434:	430b      	orrs	r3, r1
 8000436:	60d3      	str	r3, [r2, #12]
						break;
 8000438:	bf00      	nop
					break;
 800043a:	e041      	b.n	80004c0 <GPIO_Init+0x154>
							GPIOA_MODER |= (0x01 << 2*PIN_NO);
 800043c:	4b74      	ldr	r3, [pc, #464]	; (8000610 <GPIO_Init+0x2a4>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	2101      	movs	r1, #1
 8000446:	fa01 f202 	lsl.w	r2, r1, r2
 800044a:	4611      	mov	r1, r2
 800044c:	4a70      	ldr	r2, [pc, #448]	; (8000610 <GPIO_Init+0x2a4>)
 800044e:	430b      	orrs	r3, r1
 8000450:	6013      	str	r3, [r2, #0]
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d003      	beq.n	8000460 <GPIO_Init+0xf4>
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d00c      	beq.n	8000478 <GPIO_Init+0x10c>
					break;
 800045e:	e02f      	b.n	80004c0 <GPIO_Init+0x154>
												GPIOA_OTYPER &= ~(0x01<<PIN_NO);
 8000460:	4b6b      	ldr	r3, [pc, #428]	; (8000610 <GPIO_Init+0x2a4>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	2101      	movs	r1, #1
 8000466:	68ba      	ldr	r2, [r7, #8]
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	43d2      	mvns	r2, r2
 800046e:	4611      	mov	r1, r2
 8000470:	4a67      	ldr	r2, [pc, #412]	; (8000610 <GPIO_Init+0x2a4>)
 8000472:	400b      	ands	r3, r1
 8000474:	6053      	str	r3, [r2, #4]
										break;
 8000476:	e00a      	b.n	800048e <GPIO_Init+0x122>
												GPIOA_OTYPER |= (0x01<<PIN_NO);
 8000478:	4b65      	ldr	r3, [pc, #404]	; (8000610 <GPIO_Init+0x2a4>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	2101      	movs	r1, #1
 800047e:	68ba      	ldr	r2, [r7, #8]
 8000480:	fa01 f202 	lsl.w	r2, r1, r2
 8000484:	4611      	mov	r1, r2
 8000486:	4a62      	ldr	r2, [pc, #392]	; (8000610 <GPIO_Init+0x2a4>)
 8000488:	430b      	orrs	r3, r1
 800048a:	6053      	str	r3, [r2, #4]
										break;
 800048c:	bf00      	nop
					break;
 800048e:	e017      	b.n	80004c0 <GPIO_Init+0x154>
							GPIOA_MODER |= (0x02 << 2*PIN_NO);
 8000490:	4b5f      	ldr	r3, [pc, #380]	; (8000610 <GPIO_Init+0x2a4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	2102      	movs	r1, #2
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	4611      	mov	r1, r2
 80004a0:	4a5b      	ldr	r2, [pc, #364]	; (8000610 <GPIO_Init+0x2a4>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6013      	str	r3, [r2, #0]
					break;
 80004a6:	e00b      	b.n	80004c0 <GPIO_Init+0x154>
							GPIOA_MODER |= (0x03 << 2*PIN_NO);
 80004a8:	4b59      	ldr	r3, [pc, #356]	; (8000610 <GPIO_Init+0x2a4>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	0052      	lsls	r2, r2, #1
 80004b0:	2103      	movs	r1, #3
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a55      	ldr	r2, [pc, #340]	; (8000610 <GPIO_Init+0x2a4>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6013      	str	r3, [r2, #0]
					break;
 80004be:	bf00      	nop
		break;
 80004c0:	e09b      	b.n	80005fa <GPIO_Init+0x28e>
				RCC_AHB1ENR |= (0x01 <<1);
 80004c2:	4b52      	ldr	r3, [pc, #328]	; (800060c <GPIO_Init+0x2a0>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a51      	ldr	r2, [pc, #324]	; (800060c <GPIO_Init+0x2a0>)
 80004c8:	f043 0302 	orr.w	r3, r3, #2
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	f200 8094 	bhi.w	80005fe <GPIO_Init+0x292>
 80004d6:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <GPIO_Init+0x170>)
 80004d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004dc:	080004ed 	.word	0x080004ed
 80004e0:	08000575 	.word	0x08000575
 80004e4:	080005c9 	.word	0x080005c9
 80004e8:	080005e1 	.word	0x080005e1
							GPIOB_MODER &= ~(0x03 << 2*PIN_NO);
 80004ec:	4b49      	ldr	r3, [pc, #292]	; (8000614 <GPIO_Init+0x2a8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	0052      	lsls	r2, r2, #1
 80004f4:	2103      	movs	r1, #3
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a45      	ldr	r2, [pc, #276]	; (8000614 <GPIO_Init+0x2a8>)
 8000500:	400b      	ands	r3, r1
 8000502:	6013      	str	r3, [r2, #0]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d003      	beq.n	8000512 <GPIO_Init+0x1a6>
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d018      	beq.n	8000542 <GPIO_Init+0x1d6>
					break;
 8000510:	e072      	b.n	80005f8 <GPIO_Init+0x28c>
											GPIOB_PUPDR &= ~(0x03<<2*PIN_NO);
 8000512:	4b40      	ldr	r3, [pc, #256]	; (8000614 <GPIO_Init+0x2a8>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	0052      	lsls	r2, r2, #1
 800051a:	2103      	movs	r1, #3
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	43d2      	mvns	r2, r2
 8000522:	4611      	mov	r1, r2
 8000524:	4a3b      	ldr	r2, [pc, #236]	; (8000614 <GPIO_Init+0x2a8>)
 8000526:	400b      	ands	r3, r1
 8000528:	60d3      	str	r3, [r2, #12]
											GPIOB_PUPDR |= (1<<2*PIN_NO);
 800052a:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <GPIO_Init+0x2a8>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	0052      	lsls	r2, r2, #1
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	4611      	mov	r1, r2
 800053a:	4a36      	ldr	r2, [pc, #216]	; (8000614 <GPIO_Init+0x2a8>)
 800053c:	430b      	orrs	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
										break;
 8000540:	e017      	b.n	8000572 <GPIO_Init+0x206>
											GPIOB_PUPDR &= ~(0x03<<2*PIN_NO);
 8000542:	4b34      	ldr	r3, [pc, #208]	; (8000614 <GPIO_Init+0x2a8>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	0052      	lsls	r2, r2, #1
 800054a:	2103      	movs	r1, #3
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	43d2      	mvns	r2, r2
 8000552:	4611      	mov	r1, r2
 8000554:	4a2f      	ldr	r2, [pc, #188]	; (8000614 <GPIO_Init+0x2a8>)
 8000556:	400b      	ands	r3, r1
 8000558:	60d3      	str	r3, [r2, #12]
											GPIOB_PUPDR |= (0x02<<2*PIN_NO);
 800055a:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <GPIO_Init+0x2a8>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	68ba      	ldr	r2, [r7, #8]
 8000560:	0052      	lsls	r2, r2, #1
 8000562:	2102      	movs	r1, #2
 8000564:	fa01 f202 	lsl.w	r2, r1, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a2a      	ldr	r2, [pc, #168]	; (8000614 <GPIO_Init+0x2a8>)
 800056c:	430b      	orrs	r3, r1
 800056e:	60d3      	str	r3, [r2, #12]
											break;
 8000570:	bf00      	nop
					break;
 8000572:	e041      	b.n	80005f8 <GPIO_Init+0x28c>
							GPIOB_MODER |= (0x01 << 2*PIN_NO);
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <GPIO_Init+0x2a8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	0052      	lsls	r2, r2, #1
 800057c:	2101      	movs	r1, #1
 800057e:	fa01 f202 	lsl.w	r2, r1, r2
 8000582:	4611      	mov	r1, r2
 8000584:	4a23      	ldr	r2, [pc, #140]	; (8000614 <GPIO_Init+0x2a8>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d003      	beq.n	8000598 <GPIO_Init+0x22c>
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d00c      	beq.n	80005b0 <GPIO_Init+0x244>
					break;
 8000596:	e02f      	b.n	80005f8 <GPIO_Init+0x28c>
												GPIOB_OTYPER &= ~(0x01<<PIN_NO);
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <GPIO_Init+0x2a8>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	2101      	movs	r1, #1
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	43d2      	mvns	r2, r2
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <GPIO_Init+0x2a8>)
 80005aa:	400b      	ands	r3, r1
 80005ac:	6053      	str	r3, [r2, #4]
										break;
 80005ae:	e00a      	b.n	80005c6 <GPIO_Init+0x25a>
												GPIOB_OTYPER |= (0x01<<PIN_NO);
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <GPIO_Init+0x2a8>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	2101      	movs	r1, #1
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	fa01 f202 	lsl.w	r2, r1, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <GPIO_Init+0x2a8>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6053      	str	r3, [r2, #4]
										break;
 80005c4:	bf00      	nop
					break;
 80005c6:	e017      	b.n	80005f8 <GPIO_Init+0x28c>
							GPIOB_MODER |= (0x02 << 2*PIN_NO);
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <GPIO_Init+0x2a8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	68ba      	ldr	r2, [r7, #8]
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	2102      	movs	r1, #2
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <GPIO_Init+0x2a8>)
 80005da:	430b      	orrs	r3, r1
 80005dc:	6013      	str	r3, [r2, #0]
					break;
 80005de:	e00b      	b.n	80005f8 <GPIO_Init+0x28c>
							GPIOB_MODER |= (0x03 << 2*PIN_NO);
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <GPIO_Init+0x2a8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	2103      	movs	r1, #3
 80005ea:	fa01 f202 	lsl.w	r2, r1, r2
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <GPIO_Init+0x2a8>)
 80005f2:	430b      	orrs	r3, r1
 80005f4:	6013      	str	r3, [r2, #0]
					break;
 80005f6:	bf00      	nop
		break;
 80005f8:	e001      	b.n	80005fe <GPIO_Init+0x292>
		break;
 80005fa:	bf00      	nop
 80005fc:	e000      	b.n	8000600 <GPIO_Init+0x294>
		break;
 80005fe:	bf00      	nop
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40023800 	.word	0x40023800
 8000610:	40020000 	.word	0x40020000
 8000614:	40020400 	.word	0x40020400

08000618 <__libc_init_array>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	4d0d      	ldr	r5, [pc, #52]	; (8000650 <__libc_init_array+0x38>)
 800061c:	4c0d      	ldr	r4, [pc, #52]	; (8000654 <__libc_init_array+0x3c>)
 800061e:	1b64      	subs	r4, r4, r5
 8000620:	10a4      	asrs	r4, r4, #2
 8000622:	2600      	movs	r6, #0
 8000624:	42a6      	cmp	r6, r4
 8000626:	d109      	bne.n	800063c <__libc_init_array+0x24>
 8000628:	4d0b      	ldr	r5, [pc, #44]	; (8000658 <__libc_init_array+0x40>)
 800062a:	4c0c      	ldr	r4, [pc, #48]	; (800065c <__libc_init_array+0x44>)
 800062c:	f000 f818 	bl	8000660 <_init>
 8000630:	1b64      	subs	r4, r4, r5
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	2600      	movs	r6, #0
 8000636:	42a6      	cmp	r6, r4
 8000638:	d105      	bne.n	8000646 <__libc_init_array+0x2e>
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000640:	4798      	blx	r3
 8000642:	3601      	adds	r6, #1
 8000644:	e7ee      	b.n	8000624 <__libc_init_array+0xc>
 8000646:	f855 3b04 	ldr.w	r3, [r5], #4
 800064a:	4798      	blx	r3
 800064c:	3601      	adds	r6, #1
 800064e:	e7f2      	b.n	8000636 <__libc_init_array+0x1e>
 8000650:	08000678 	.word	0x08000678
 8000654:	08000678 	.word	0x08000678
 8000658:	08000678 	.word	0x08000678
 800065c:	0800067c 	.word	0x0800067c

08000660 <_init>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr

0800066c <_fini>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	bf00      	nop
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr
